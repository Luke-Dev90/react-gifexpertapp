{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagen","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,cAAkB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAkB7C,OAEI,sBAAMC,SAXS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SApBkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,EAAhBJ,GAAiB,IAAdC,EAAa,EAAbA,MAAMV,EAAO,EAAPA,IAIlC,OACI,sBAAKc,UAAU,gDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,YCJCO,EAAU,SAAC,GAAgB,IAAdnB,EAAa,EAAbA,SAAa,ECFX,SAAC,GAAiB,IAAfA,EAAc,EAAdA,SAAc,EAEfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAiBzC,OAVAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGnB,CAAEpB,IAEGqB,EDZuBK,CAAc,CAAC1B,aAAjC2B,EAHuB,EAG5BpB,KAAYa,EAHgB,EAGhBA,QAKnB,OACI,qCACI,mCAAMpB,KACDoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEIW,EAAOlB,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEWlBiB,EA5BM,WAAK,IAAD,EAEe1C,mBAAS,CAAC,cAFzB,mBAEd2C,EAFc,KAEF5C,EAFE,KAIrB,OAEA,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGI,6BAEK4C,EAAWpB,KAAK,SAACT,GAAD,OACb,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCf7B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1b9b5d3e.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory  = ( {setCategories}) =>{\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length >2){\r\n\r\n            setCategories( cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return(\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type='text'\r\n            value={inputValue}\r\n            onChange={ handleInputChange}\r\n            />\r\n        </form>    \r\n        \r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=2CLlm0C9quusFSUDLEou4FiNvsTU8gut`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({id,title,url})=>{\r\n\r\n    //console.log(id,title,url);\r\n\r\n    return(\r\n        <div className='card animate__animated animate__fadeInLeftBig'>\r\n            <img src={url} alt={title}/>\r\n            <p> {title}  </p> \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category}) =>{\r\n   \r\n    // const [images, setImages] = useState([]);   \r\n    const {data:imagen,loading} = useFetchGifs( {category});\r\n\r\n    \r\n\r\n\r\n    return(\r\n        <>\r\n            <h3> {category}</h3>\r\n                {loading && <p>Loading</p>}\r\n                <div className='card-grid'>\r\n                {\r\n                    imagen.map( img => (\r\n\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ({ category }) =>{\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () =>{\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    },[ category])\r\n    \r\n    return state;\r\n}","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = ()=>{\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return(\r\n        \r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n       \r\n        {\r\n            <ol>\r\n                {\r\n                 categories.map( (category) => \r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}/>)\r\n                }\r\n            </ol>\r\n        }\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}